#!/usr/bin/env python3
#
# G. Mazzitelli 2021
#

__version__ = '1.0'

import os,sys
# import h5py penso che non serva
import numpy as np 
import ROOT
from root_numpy import array2hist

from readerHIS import openHIS

def mv_file(filein, fileout):
    command = '/bin/mv ' + filein + ' ' + fileout
    return os.system(command)

def rm_file(filein):
    command = '/bin/rm '+ filein
    return os.system(command)

def grep_file(what, filein):
    command = '/usr/bin/grep ' + what +' '+filein
    status, output = commands.getstatusoutput(command)
    return output
def append2file(line, filein):
    command = 'echo '+ line + ' >> '+filein
    return os.system(command)


def ruttalo(his_file):
    stem, _ = os.path.splitext(his_file)
    his = openHIS(his_file)
    outname = stem+'.root' 
    rf = ROOT.TFile(outname,'recreate')

    runN = stem.split('run')[-1]
    run = runN if len(runN) else 'XXXX'

    for idx, section in enumerate(his):
        if idx % 5 == 0: print("transferring image ",idx)
        (nx,ny) = section.shape 
        title = stem + ('_%04d' % idx)
        postfix = 'run{run}_ev{ev}'.format(run=run,ev=idx)
        title = 'pic_{pfx}'.format(pfx=postfix)
        h2 = ROOT.TH2S(title,title,nx,0,nx,ny,0,ny)
        h2.GetXaxis().SetTitle('x')
        h2.GetYaxis().SetTitle('y')
        _ = array2hist(np.fliplr(np.transpose(section)),h2)
        h2.Write()
    rf.Close()
    return outname, run
path = '/Users/mazzitel/lime/'
subdir = 'Data/LAB/'
for file in os.listdir(path):
        if file.endswith(".HIS") and file.startswith("run"):
            his_file = path+file
            print (his_file)
            filein, run = ruttalo(his_file)
            fileout = 'histograms_Run{run}.root'.format(run=run)
            append2file(fileout, path+'/daq_rooted.log')
            print ("file {} done".format(fileout))
            mv_file(filein, path+subdir+fileout)
            os.chdir(path)
            # swift_put(subdir+fileout)
            # append2file(fileout, path+'/daq_copyed.log')
            # print ("file {} copied".format(fileout))
            rm_file(his_file)
            print ("file {} removed".format(his_file))
            # rm_file(subdir+fileout)
            # print ("file {} removed".format(fileout))

print("ALL DONE")