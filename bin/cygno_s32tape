#!/usr/bin/env python
import gfal2
import logging
import sys
import os
from optparse import OptionParser
"""
This is a basics example that should evolve based on user needs. 
The purpose is to enable the third party copy (TPC) from a generic source
to a generic destination. 
gfal usage grant the possibility to use two distinct protocols for source
and destination, including two disting authN/Z method. 
All this enable the copy to Tier1 CNAF Tape buffer.  

https://gitlab.cern.ch/dmc/gfal2-util

"""

def event_callback(event):
    #print event
    print("[%s] %s %s %s" % (event.timestamp, event.domain, event.stage, event.description))

def monitor_callback(src, dst, average, instant, transferred, elapsed):
    print("[%4d] %.2fMB (%.2fKB/s)\r" % (elapsed, transferred / 1048576, average / 1024)),
    sys.stdout.flush()

if __name__ == '__main__':

    #
    # define available backet on remote repo
    #
    cygno_backet_list = ["cygnus", "cygno-data", "cygno-sim", "cygno-analysis"]
    cygno_tag_list = ["LNGS", "LNF", "STD", "LAB"]
    #
    parser = OptionParser(usage='usage: %prog\t [-btv] <filename> [cygno-data] [LNGS]\n\
    Available Backet: '+str(cygno_backet_list)+'\n\
    Available Tag: '+str(cygno_tag_list))
    parser.add_option('-b','--backet', dest='backet', type='string', default='cygno-data', help='backet where dir for data;');
    parser.add_option('-t','--tag', dest='tag', type='string', default='LNGS', help='tag where dir for data;');
    parser.add_option('-v','--verbose', dest='verbose', action="store_true", default=False, help='verbose output;');
    (options, args) = parser.parse_args()
    #
    if options.verbose: 
        print(">> resquested arguments:", args)
        print(">> resquested options:", options)
        if len(args)>=1:
            print(">> filename", args[0])
        if len(args)==2:
            print(">> backet", args[1])
        if len(args)==3:
            print(">> tag", args[2])
    #       
    if len(args) < 1:
        parser.error("ERROR: no file neme...")
    else:
        source =  "https://s3.cloud.infn.it/v1/AUTH_2ebf769785574195bde2ff418deac08a/{:s}/{:s}/{:s}".format(options.backet, options.tag, args[0])
        dest   =  "davs://xfer-archive.cr.cnaf.infn.it:8443/cygno/{:s}".format(args[0])
#     filename = "run02308.mid.gz"
#     source =  "https://s3.cloud.infn.it/v1/AUTH_2ebf769785574195bde2ff418deac08a/cygno-data/LNGS/%s" %filename
#     dest   =  "davs://xfer-archive.cr.cnaf.infn.it:8443/cygno/%s" %filename

    if options.verbose: 
        print(source)
        print(dest)
        
        
    dest_cred = os.environ['BEARER_TOKEN']

    print("Source:      %s" % source)
    print("Destination: %s" % dest)

    # Instantiate gfal2
    ctx = gfal2.creat_context()

    # Set transfer parameters
    params = ctx.transfer_parameters()
    params.event_callback   = event_callback
    params.monitor_callback = monitor_callback
    d_cred = ctx.cred_new("BEARER",dest_cred)
    ctx.cred_set(dest,d_cred)
    print("Destination credentials: %s" % dest_cred)

    # Five minutes timeout
    params.timeout = 300

    # Do actual copy using different protocols for source and destination 
    try:
        r = ctx.filecopy(params, source, dest)
        print("Copy succeeded!")
    except Exception as e:
        print("Copy failed: %s" % str(e))
        sys.exit(1)